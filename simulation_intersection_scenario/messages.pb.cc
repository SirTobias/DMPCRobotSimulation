/*// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CarComm {

namespace {

const ::google::protobuf::Descriptor* Cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cell_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  Cell_descriptor_ = file->message_type(0);
  static const int Cell_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, car_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, ktarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, mtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, globallivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, globalwaittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, reserverequestsnextcell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, waittimenextcell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, externalrequests_),
  };
  Cell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Cell_descriptor_,
      Cell::default_instance_,
      Cell_offsets_,
      -1,
      -1,
      -1,
      sizeof(Cell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cell, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Cell_descriptor_, &Cell::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete Cell::default_instance_;
  delete Cell_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\007CarComm\"\333\001\n\004Cell\022\013\n\003ca"
    "r\030\001 \001(\t\022\t\n\001k\030\002 \001(\r\022\t\n\001m\030\003 \001(\r\022\t\n\001t\030\004 \001(\001"
    "\022\017\n\007kTarget\030\005 \001(\r\022\017\n\007mTarget\030\006 \001(\r\022\026\n\016gl"
    "obalLiveTime\030\007 \001(\005\022\026\n\016globalWaitTime\030\010 \001"
    "(\005\022\037\n\027reserveRequestsNextCell\030\t \001(\005\022\030\n\020w"
    "aitTimeNextCell\030\n \001(\005\022\030\n\020externalRequest"
    "s\030\013 \001(\005b\006proto3", 255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  Cell::default_instance_ = new Cell();
  Cell::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Cell::kCarFieldNumber;
const int Cell::kKFieldNumber;
const int Cell::kMFieldNumber;
const int Cell::kTFieldNumber;
const int Cell::kKTargetFieldNumber;
const int Cell::kMTargetFieldNumber;
const int Cell::kGlobalLiveTimeFieldNumber;
const int Cell::kGlobalWaitTimeFieldNumber;
const int Cell::kReserveRequestsNextCellFieldNumber;
const int Cell::kWaitTimeNextCellFieldNumber;
const int Cell::kExternalRequestsFieldNumber;
#endif  // !_MSC_VER

Cell::Cell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CarComm.Cell)
}

void Cell::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Cell::Cell(const Cell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CarComm.Cell)
}

void Cell::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  car_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k_ = 0u;
  m_ = 0u;
  t_ = 0;
  ktarget_ = 0u;
  mtarget_ = 0u;
  globallivetime_ = 0;
  globalwaittime_ = 0;
  reserverequestsnextcell_ = 0;
  waittimenextcell_ = 0;
  externalrequests_ = 0;
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:CarComm.Cell)
  SharedDtor();
}

void Cell::SharedDtor() {
  car_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell_descriptor_;
}

const Cell& Cell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Cell* Cell::default_instance_ = NULL;

Cell* Cell::New(::google::protobuf::Arena* arena) const {
  Cell* n = new Cell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cell::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Cell*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(k_, globalwaittime_);
  car_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(reserverequestsnextcell_, externalrequests_);

#undef ZR_HELPER_
#undef ZR_

}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CarComm.Cell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string car = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_car()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->car().data(), this->car().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CarComm.Cell.car"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_k;
        break;
      }

      // optional uint32 k = 2;
      case 2: {
        if (tag == 16) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &k_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m;
        break;
      }

      // optional uint32 m = 3;
      case 3: {
        if (tag == 24) {
         parse_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_t;
        break;
      }

      // optional double t = 4;
      case 4: {
        if (tag == 33) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kTarget;
        break;
      }

      // optional uint32 kTarget = 5;
      case 5: {
        if (tag == 40) {
         parse_kTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ktarget_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mTarget;
        break;
      }

      // optional uint32 mTarget = 6;
      case 6: {
        if (tag == 48) {
         parse_mTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtarget_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_globalLiveTime;
        break;
      }

      // optional int32 globalLiveTime = 7;
      case 7: {
        if (tag == 56) {
         parse_globalLiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &globallivetime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_globalWaitTime;
        break;
      }

      // optional int32 globalWaitTime = 8;
      case 8: {
        if (tag == 64) {
         parse_globalWaitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &globalwaittime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reserveRequestsNextCell;
        break;
      }

      // optional int32 reserveRequestsNextCell = 9;
      case 9: {
        if (tag == 72) {
         parse_reserveRequestsNextCell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserverequestsnextcell_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_waitTimeNextCell;
        break;
      }

      // optional int32 waitTimeNextCell = 10;
      case 10: {
        if (tag == 80) {
         parse_waitTimeNextCell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waittimenextcell_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_externalRequests;
        break;
      }

      // optional int32 externalRequests = 11;
      case 11: {
        if (tag == 88) {
         parse_externalRequests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &externalrequests_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CarComm.Cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CarComm.Cell)
  return false;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CarComm.Cell)
  // optional string car = 1;
  if (this->car().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car().data(), this->car().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CarComm.Cell.car");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->car(), output);
  }

  // optional uint32 k = 2;
  if (this->k() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->k(), output);
  }

  // optional uint32 m = 3;
  if (this->m() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m(), output);
  }

  // optional double t = 4;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->t(), output);
  }

  // optional uint32 kTarget = 5;
  if (this->ktarget() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ktarget(), output);
  }

  // optional uint32 mTarget = 6;
  if (this->mtarget() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mtarget(), output);
  }

  // optional int32 globalLiveTime = 7;
  if (this->globallivetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->globallivetime(), output);
  }

  // optional int32 globalWaitTime = 8;
  if (this->globalwaittime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->globalwaittime(), output);
  }

  // optional int32 reserveRequestsNextCell = 9;
  if (this->reserverequestsnextcell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reserverequestsnextcell(), output);
  }

  // optional int32 waitTimeNextCell = 10;
  if (this->waittimenextcell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->waittimenextcell(), output);
  }

  // optional int32 externalRequests = 11;
  if (this->externalrequests() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->externalrequests(), output);
  }

  // @@protoc_insertion_point(serialize_end:CarComm.Cell)
}

::google::protobuf::uint8* Cell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CarComm.Cell)
  // optional string car = 1;
  if (this->car().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->car().data(), this->car().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CarComm.Cell.car");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->car(), target);
  }

  // optional uint32 k = 2;
  if (this->k() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->k(), target);
  }

  // optional uint32 m = 3;
  if (this->m() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m(), target);
  }

  // optional double t = 4;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->t(), target);
  }

  // optional uint32 kTarget = 5;
  if (this->ktarget() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ktarget(), target);
  }

  // optional uint32 mTarget = 6;
  if (this->mtarget() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mtarget(), target);
  }

  // optional int32 globalLiveTime = 7;
  if (this->globallivetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->globallivetime(), target);
  }

  // optional int32 globalWaitTime = 8;
  if (this->globalwaittime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->globalwaittime(), target);
  }

  // optional int32 reserveRequestsNextCell = 9;
  if (this->reserverequestsnextcell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reserverequestsnextcell(), target);
  }

  // optional int32 waitTimeNextCell = 10;
  if (this->waittimenextcell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->waittimenextcell(), target);
  }

  // optional int32 externalRequests = 11;
  if (this->externalrequests() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->externalrequests(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CarComm.Cell)
  return target;
}

int Cell::ByteSize() const {
  int total_size = 0;

  // optional string car = 1;
  if (this->car().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->car());
  }

  // optional uint32 k = 2;
  if (this->k() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->k());
  }

  // optional uint32 m = 3;
  if (this->m() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m());
  }

  // optional double t = 4;
  if (this->t() != 0) {
    total_size += 1 + 8;
  }

  // optional uint32 kTarget = 5;
  if (this->ktarget() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ktarget());
  }

  // optional uint32 mTarget = 6;
  if (this->mtarget() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mtarget());
  }

  // optional int32 globalLiveTime = 7;
  if (this->globallivetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->globallivetime());
  }

  // optional int32 globalWaitTime = 8;
  if (this->globalwaittime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->globalwaittime());
  }

  // optional int32 reserveRequestsNextCell = 9;
  if (this->reserverequestsnextcell() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reserverequestsnextcell());
  }

  // optional int32 waitTimeNextCell = 10;
  if (this->waittimenextcell() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->waittimenextcell());
  }

  // optional int32 externalRequests = 11;
  if (this->externalrequests() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->externalrequests());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Cell* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Cell>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.car().size() > 0) {

    car_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_);
  }
  if (from.k() != 0) {
    set_k(from.k());
  }
  if (from.m() != 0) {
    set_m(from.m());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.ktarget() != 0) {
    set_ktarget(from.ktarget());
  }
  if (from.mtarget() != 0) {
    set_mtarget(from.mtarget());
  }
  if (from.globallivetime() != 0) {
    set_globallivetime(from.globallivetime());
  }
  if (from.globalwaittime() != 0) {
    set_globalwaittime(from.globalwaittime());
  }
  if (from.reserverequestsnextcell() != 0) {
    set_reserverequestsnextcell(from.reserverequestsnextcell());
  }
  if (from.waittimenextcell() != 0) {
    set_waittimenextcell(from.waittimenextcell());
  }
  if (from.externalrequests() != 0) {
    set_externalrequests(from.externalrequests());
  }
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {

  return true;
}

void Cell::Swap(Cell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cell::InternalSwap(Cell* other) {
  car_.Swap(&other->car_);
  std::swap(k_, other->k_);
  std::swap(m_, other->m_);
  std::swap(t_, other->t_);
  std::swap(ktarget_, other->ktarget_);
  std::swap(mtarget_, other->mtarget_);
  std::swap(globallivetime_, other->globallivetime_);
  std::swap(globalwaittime_, other->globalwaittime_);
  std::swap(reserverequestsnextcell_, other->reserverequestsnextcell_);
  std::swap(waittimenextcell_, other->waittimenextcell_);
  std::swap(externalrequests_, other->externalrequests_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cell_descriptor_;
  metadata.reflection = Cell_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cell

// optional string car = 1;
void Cell::clear_car() {
  car_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Cell::car() const {
  // @@protoc_insertion_point(field_get:CarComm.Cell.car)
  return car_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Cell::set_car(const ::std::string& value) {
  
  car_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CarComm.Cell.car)
}
 void Cell::set_car(const char* value) {
  
  car_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CarComm.Cell.car)
}
 void Cell::set_car(const char* value, size_t size) {
  
  car_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CarComm.Cell.car)
}
 ::std::string* Cell::mutable_car() {
  
  // @@protoc_insertion_point(field_mutable:CarComm.Cell.car)
  return car_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Cell::release_car() {
  
  return car_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Cell::set_allocated_car(::std::string* car) {
  if (car != NULL) {
    
  } else {
    
  }
  car_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car);
  // @@protoc_insertion_point(field_set_allocated:CarComm.Cell.car)
}

// optional uint32 k = 2;
void Cell::clear_k() {
  k_ = 0u;
}
 ::google::protobuf::uint32 Cell::k() const {
  // @@protoc_insertion_point(field_get:CarComm.Cell.k)
  return k_;
}
 void Cell::set_k(::google::protobuf::uint32 value) {
  
  k_ = value;
  // @@protoc_insertion_point(field_set:CarComm.Cell.k)
}

// optional uint32 m = 3;
void Cell::clear_m() {
  m_ = 0u;
}
 ::google::protobuf::uint32 Cell::m() const {
  // @@protoc_insertion_point(field_get:CarComm.Cell.m)
  return m_;
}
 void Cell::set_m(::google::protobuf::uint32 value) {
  
  m_ = value;
  // @@protoc_insertion_point(field_set:CarComm.Cell.m)
}

// optional double t = 4;
void Cell::clear_t() {
  t_ = 0;
}
 double Cell::t() const {
  // @@protoc_insertion_point(field_get:CarComm.Cell.t)
  return t_;
}
 void Cell::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:CarComm.Cell.t)
}

// optional uint32 kTarget = 5;
void Cell::clear_ktarget() {
  ktarget_ = 0u;
}
 ::google::protobuf::uint32 Cell::ktarget() const {
  // @@protoc_insertion_point(field_get:CarComm.Cell.kTarget)
  return ktarget_;
}
 void Cell::set_ktarget(::google::protobuf::uint32 value) {
  
  ktarget_ = value;
  // @@protoc_insertion_point(field_set:CarComm.Cell.kTarget)
}

// optional uint32 mTarget = 6;
void Cell::clear_mtarget() {
  mtarget_ = 0u;
}
 ::google::protobuf::uint32 Cell::mtarget() const {
  // @@protoc_insertion_point(field_get:CarComm.Cell.mTarget)
  return mtarget_;
}
 void Cell::set_mtarget(::google::protobuf::uint32 value) {
  
  mtarget_ = value;
  // @@protoc_insertion_point(field_set:CarComm.Cell.mTarget)
}

// optional int32 globalLiveTime = 7;
void Cell::clear_globallivetime() {
  globallivetime_ = 0;
}
 ::google::protobuf::int32 Cell::globallivetime() const {
  // @@protoc_insertion_point(field_get:CarComm.Cell.globalLiveTime)
  return globallivetime_;
}
 void Cell::set_globallivetime(::google::protobuf::int32 value) {
  
  globallivetime_ = value;
  // @@protoc_insertion_point(field_set:CarComm.Cell.globalLiveTime)
}

// optional int32 globalWaitTime = 8;
void Cell::clear_globalwaittime() {
  globalwaittime_ = 0;
}
 ::google::protobuf::int32 Cell::globalwaittime() const {
  // @@protoc_insertion_point(field_get:CarComm.Cell.globalWaitTime)
  return globalwaittime_;
}
 void Cell::set_globalwaittime(::google::protobuf::int32 value) {
  
  globalwaittime_ = value;
  // @@protoc_insertion_point(field_set:CarComm.Cell.globalWaitTime)
}

// optional int32 reserveRequestsNextCell = 9;
void Cell::clear_reserverequestsnextcell() {
  reserverequestsnextcell_ = 0;
}
 ::google::protobuf::int32 Cell::reserverequestsnextcell() const {
  // @@protoc_insertion_point(field_get:CarComm.Cell.reserveRequestsNextCell)
  return reserverequestsnextcell_;
}
 void Cell::set_reserverequestsnextcell(::google::protobuf::int32 value) {
  
  reserverequestsnextcell_ = value;
  // @@protoc_insertion_point(field_set:CarComm.Cell.reserveRequestsNextCell)
}

// optional int32 waitTimeNextCell = 10;
void Cell::clear_waittimenextcell() {
  waittimenextcell_ = 0;
}
 ::google::protobuf::int32 Cell::waittimenextcell() const {
  // @@protoc_insertion_point(field_get:CarComm.Cell.waitTimeNextCell)
  return waittimenextcell_;
}
 void Cell::set_waittimenextcell(::google::protobuf::int32 value) {
  
  waittimenextcell_ = value;
  // @@protoc_insertion_point(field_set:CarComm.Cell.waitTimeNextCell)
}

// optional int32 externalRequests = 11;
void Cell::clear_externalrequests() {
  externalrequests_ = 0;
}
 ::google::protobuf::int32 Cell::externalrequests() const {
  // @@protoc_insertion_point(field_get:CarComm.Cell.externalRequests)
  return externalrequests_;
}
 void Cell::set_externalrequests(::google::protobuf::int32 value) {
  
  externalrequests_ = value;
  // @@protoc_insertion_point(field_set:CarComm.Cell.externalRequests)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CarComm

// @@protoc_insertion_point(global_scope)
*/
